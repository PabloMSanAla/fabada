name: Release Tests

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  comprehensive-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pandas opencv-python-headless scikit-image matplotlib
        
    - name: Run comprehensive test suite
      run: |
        pytest tests/ -v --tb=short
        
    - name: Test example scripts
      run: |
        python tests/test_smoke.py
        
  validate-installation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install .
        python -c "from fabada import fabada, PSNR; print('✓ FABADA installed successfully')"
        
    - name: Test with example data
      run: |
        pip install pandas
        python -c "
        import numpy as np
        import pandas as pd
        from fabada import fabada, PSNR
        
        # Create synthetic data since examples might not be in installed package
        x = np.linspace(0, 4*np.pi, 200)
        y_true = np.sin(x) + 0.5*np.sin(3*x)
        y_true = (y_true - y_true.min()) / (y_true.max() - y_true.min()) * 255
        
        np.random.seed(42)
        noise = np.random.normal(0, 15, y_true.shape)
        y_noisy = y_true + noise
        
        y_recovered = fabada(y_noisy, 225)  # variance = 15^2
        
        psnr_before = PSNR(y_noisy, y_true, L=255)
        psnr_after = PSNR(y_recovered, y_true, L=255)
        
        print(f'Installation validation:')
        print(f'  PSNR before: {psnr_before:.2f} dB')
        print(f'  PSNR after: {psnr_after:.2f} dB')
        print(f'  Improvement: {psnr_after - psnr_before:.2f} dB')
        
        assert psnr_after > psnr_before, 'FABADA should improve PSNR'
        print('✓ Package installation validation passed')
        "